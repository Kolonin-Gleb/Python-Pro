# Модуль copy используется для создания полных копий объектов

# Без полного копирования обе сущности ссылаются на 1 список
'''
data1 = [1, 2, 3]
data2 = data1
data1.append(4)

print(id(data1), data1)
print(id(data2), data2)
'''

# В модуле copy есть 2 метода:
'''
copy() - возращает поверхностную копию объекта
Вместо копирования ДОЧЕРНИХ элементов в новый объект, происходит копирование ссылок на их адреса памяти

deepcopy()  - возращает глубокую копию объекта
Полностью независимая копия объекта
'''

# Пример поверхностного копирования списка
# Элементы списка - дочерние элементы

# Удачное копирование
'''
import copy

data1 = [[1, 2, 3], [4, 5, 6]]
data2 = copy.copy(data1)

data1.append([7, 8, 9]) # Добавление списка эл. в независимую сущ. - список

print(id(data1), data1)
print(id(data2), data2)
# Добавление списка эл. не повлияло на клона
'''

# Копирование с "побочным эффектом"
'''
import copy

data1 = [[1, 2, 3], [4, 5, 6]]
data2 = copy.copy(data1)

data1[0].append(7) # Добавление эл. в вложенные списки
data2[1].append(8) # Добавление эл. в вложенные списки

print(id(data1), data1)
print(id(data2), data2)
# Добавление элементов повлияло на клонов
# Т.к. оно производилось в дочерние элементы, 
# а при поверхностном копировании копируются лишь ссылки на них
'''


# Пример глубокого копирования списка
# Элементы списка - дочерние элементы
'''
import copy

data1 = [[1, 2, 3], [4, 5, 6]]
data2 = copy.deepcopy(data1)

data1[0].append(7) # Добавление эл. в вложенные списки
data2[1].append(8) # Добавление эл. в вложенные списки

print(id(data1), data1)
print(id(data2), data2)
# Добавление эл. не повлияло на клонов.
# Т.к. использовалось глубокое копирование
'''


