# В Python есть 2 механизма очистки памяти:
# 1) refcnt - reference counter - Счётчик ссылок (Неотключаемый)
# 2) gc - garbage collector - Сборщик мусора     (Отключаемый)


# Простой пример
'''
a = 123
b = 123
print(id(a), id(b)) # Два объекта ссылаются на 1 область памяти

a = 124
print(id(a), id(b)) # А теперь нет
'''


# Счётчик ссылок

# Узнать кол. ссылок на объект по имени
'''
import sys

lst = [1, 2, 3]
print(sys.getrefcount(lst)) # Вернёт 2, т.к. lst и функция getrefcount ссылаются на 1 обл. памяти в момент вызова
'''

# Счётчик ссылок работает в режиме реального времени и во время освобождает память, но
# он не умеет очищать память, при наличии ЦИКЛИЧЕСКИХ ссылок
'''
nums1 = [1, 2, 3]
nums2 = [4, 5]

nums1.append(nums2)
nums2.append(nums1)

# nums1 ссылается на nums2 и наоборот. Поэтому число ссылок у этих объектов всегда будет != 0
'''

# Сборщик мусора
# Запуск сборщика мусора создаёт микропаузу в работе всей программы
'''
'''
import sys

nums1 = [1, 2, 3]
nums2 = nums1
nums3 = [nums1, nums2]

del nums1

print(sys.getrefcount(nums2))