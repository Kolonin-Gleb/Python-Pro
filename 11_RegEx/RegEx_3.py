# Эти Квантификаторы не позволяют задать кол. желаемых вхождений
'''
+ позволяет искать соответствие с 1 или более вхождением
* позволяет искать соответствие с 0 или более вхождением
? позволяет искать соответствие с 0 или 1 вхождением
'''

# Кол. желаемых вхождений можно задавать с помощью {}
'''
{3} - ровно 3 вхождения
{2,4} - от 2х до 4х вхождений

{5,} - не менее 5  вхождений
{,3} - не более 3х вхождений
'''

# Жадность и ленивость квантификаторов
'''
По умолчанию все квантификаторы являются жадными. Т.е. они ищут наибольшее возможное вхождение
Т.е. квантификаторы:
*
+
?
{m,n}
{,n}
{m,}
Будут выдавать максимально возможное вхождение
'''

"""
import re
text = "Подписку нельзя оформить клиентам, живущим в <B>России</B>, а также <B>Белоруссии</B>. Приносим свои извинения."
regex = r'<B>.*</B>'
res = re.findall(regex, text)

print(res)
"""

# Любой квантификатор можно сделать ленивым добавив ?
"""
import re
text = "Подписку нельзя оформить клиентам, живущим в <B>России</B>, а также <B>Белоруссии</B>. Приносим свои извинения."
regex = r'<B>.*?</B>'
res = re.findall(regex, text)

print(res)
"""


# () - позволяют искать какую-то определённую группу
# Или создавать вложенные подвыражения
'''
Пример регулярного выражения для поиска почтовых адресов США.
regex = r'\d{5}(-\d{4})*'
'''

