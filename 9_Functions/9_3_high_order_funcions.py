# вывел все числа (тип int и float), находящиеся в данном списке, отбрасывая дробную часть у вещественных чисел
'''
data = ['Timur', -16.648911695768902, 'six', -202, 883.0093275936454, -765, (3, 4), -105.10718000213546, 976, -308.96857946288094, 458, ['one', 'two'], 479.92207220345927, -87, -71, 'twelve', 112, -621, -715.0179551194733, 'seven', 229, 729, -358, [1, 2, 3], -974, 882, -894.4709033242768, '', 323.7720806756133, 'beegeek', -224, 431, 170.6353248658936, -343.0016746052049, 'number', 104.17133679352878, [], -353.5964777099863, 'zero', -113, 288, None, -708.3036176571618]
f = lambda el: type(el) == int or type(el) == float
print(*map(int, filter(f, data)), sep='\n')
'''

# Сумма квадратов двухзначных чисел % 9 == 0
'''
numbers = [4754, -4895, -364, -4764, 4683, 1639, -43, 228, -2701, -1503, 1223, 4340, -1296, 3939, -345, 623, -3275, 1003, 4367, -1739, 550, -1217, -1334, 1526, -4359, -3028, -4663, 3356, 3887, 4297, -1982, 1013, 3299, 3556, -3324, 417, 3531, -3134, 1782, 4439, 1652, -985, 4327, 1517, 1225, -915, 2808, -3851, -1005, 3396, 2842, -3879, -3824, -3805, 1609, -4741, -3072, 3573, 4680, 588, -1430, 2378, -1095, -343, 4357, -2164, -3304, 4354, 4926, -352, -1187, -3313, 2741, 4786, -2689, 741, 4558, 1442, 62, -1099, -2201, -16, -3115, 1862, 2384, 4072, -90, 204, 1158, -3134, -2512, 756, 4148, 4370, 1756, 3609, -1148, -3909, 4123, -2906, 69, 96, 1111]

f = lambda el: -100 < el < 100 and el % 9 == 0

print( sum( map(lambda num: num**2, filter(f, numbers)) ) )
'''


# Фильтрация имён
'''
# вывел все имена, которые начинаются на буквы А и М (независимо от регистра) и имеют длину больше 4.
# Имена должны быть расположены в лексикографическом порядке, через пробел, каждое с заглавной буквы.
names = ['ульяна', 'арина', 'Дмитрий', 'Сергей', 'Яна', 'мила', 'Ольга', 'софья', 'семён', 'Никита', 'маргарита', 'Василиса', 'Кирилл', 'александр', 'александра', 'Иван', 'андрей', 'Родион', 'максим', 'алиса', 'Артём', 'софия', 'владимир', 'дамир', 'Валерий', 'степан', 'Алексей', 'Марк', 'олег', 'ирина', 'Милана', 'мия', 'денис', 'Фёдор', 'Елизавета', 'айлин', 'Варвара', 'валерия', 'Алёна', 'Николь', 'юлия', 'Ксения', 'пётр', 'георгий', 'Мария', 'глеб', 'илья', 'Захар', 'Дарья', 'Евгения', 'матвей', 'Серафим', 'екатерина', 'Тимофей', 'виктор', 'Егор', 'Ника', 'анна', 'даниил', 'тихон', 'вера', 'кира', 'Эмилия', 'Виктория', 'Игорь', 'полина', 'алина', 'Давид', 'анастасия', 'Вероника', 'ярослав', 'Руслан', 'татьяна', 'Демид', 'амелия', 'Элина', 'Арсен', 'евгений', 'мадина', 'дарина', 'Савелий', 'Платон', 'Аделина', 'диана', 'Айша', 'павел', 'Стефания', 'Тимур', 'Ева', 'Елисей', 'Артемий', 'григорий', 'Мирон', 'Мирослава', 'Мира', 'Марат', 'Лилия', 'роман', 'владислав', 'Леонид']

f = lambda name: name[0].lower() in 'ам' and len(name) > 4

print(*sorted(map(str.capitalize, filter(f, names))), sep=' ')
'''

# Рекурсивный, анонимный Фибоначи
'''
def fib(num):
    if num < 3:
        return 1
    else:
        return fib(num-1) + fib(num-2)

fib = lambda x: 1 if x < 3 else fib(x-1) + fib(x-2)

print(fib(1))
# 1

print(fib(2))
# 1

print(fib(5))
# 5
'''

# Функция print_operation_table
'''
# На каждый элемент таблицы должно отводиться ровно 3 символа, методом ljust().
# элемент со строкой n и столбцом m имеет значение operation(n, m).

def print_operation_table(operation, rows: int, cols: int):
    for row in range(1, rows+1):
        for col in range(1, cols+1):
            print(str(operation(row, col)).ljust(3), end=' ')
        print()
'''

# Функция verification
'''
def verification(login: str, password: str, success, failure):
    digits = ''
    letters = ''
    errors = []
    # Разделение пароля на символы и числа
    for symbol in password:
        if symbol.isdigit():
            digits += digits.join(symbol)
        else:
            letters += letters.join(symbol)

    # Проверка пароля
    if not letters:
        errors.append("в пароле нет ни одной буквы")
    if letters.isupper():
        errors.append("в пароле нет ни одной строчной буквы")
    if letters.islower():
        errors.append("в пароле нет ни одной заглавной буквы")
    if not digits:
        errors.append("в пароле нет ни одной цифры")
        
    if not errors:
        success(login)
    else:
        failure(login, errors[0])

# Альтернативное решение
def verification(login, password, success, failure):
    # Словарь вида bool, str
    vd = {str.isalpha: 'в пароле нет ни одной буквы', 
          str.islower: 'в пароле нет ни одной строчной буквы',
          str.isupper: 'в пароле нет ни одной заглавной буквы',
          str.isdigit: 'в пароле нет ни одной цифры'}
    for f in vd: # Проход по ключам (в f сохраняются функции)
        print(f)
        if not any(f(i) for i in password): # Для каждого символа пароля идёт проверка с каждой функцией
            return failure(login, vd[f]) # Если ни для одного символа не прошла проверка функцией.
    success(login)

'''
