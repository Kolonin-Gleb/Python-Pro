# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã

'''
non_zero = filter(None, [-2, -1, 0, 1, 2])
positive = map(abs, non_zero)

print(list(non_zero)) # [-2, -1, 1, 2]
print(list(positive)) # []

non_zero = filter(None, [-2, -1, 0, 1, 2])
positive = map(abs, non_zero)

print(list(positive)) # [2, 1, 1, 2]
print(list(non_zero)) # []
'''


# filterfalse
'''
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ filter(), —Ç–æ –µ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, 
—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable, 
–¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è predicate –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ False.

def filterfalse(predicate, iterable):
    if predicate == None: predicate = bool
    return filter(lambda el: not predicate(el), iterable)
# –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ filter
'''

# –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# –ß–µ—Ä–µ–∑ numpy
'''
import numpy as np

def transpose(matrix):
    res = []
    m = np.array(matrix).T
    for row in m:
        res.append(list(row))
    return res
'''
# –ß–µ—Ä–µ–∑ lambda
# transpose = lambda matrix: list(map(list, zip(*matrix)))


# –§—É–Ω–∫—Ü–∏—è get_min_max() üòé

'''
def get_min_max(data: list):
    if not data: return None
    iter1 = enumerate(data)
    iter2 = enumerate(data)
    return min(iter1, key=lambda el: el[1])[0], max(iter2, key=lambda el: el[1])[0]
'''

# –ë–µ–∑ enumerate –∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º
# get_min_max = lambda data: (data.index(min(data)), data.index(max(data))) if data !=[] else None

# TODO: –†–µ—à–∏—Ç—å –ø–æ–∑–∂–µ
# –§—É–Ω–∫—Ü–∏—è get_min_max() üò≥ iterable 
'''
def get_min_max(iterable):
    # –¢–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç.–∫. –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —á—Ç–æ –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ø–∞–º—è—Ç—å
    collection = list(iterable)
    if not collection: return None
    return min(collection), max(collection)
'''


# TODO: –†–µ—à–∏—Ç—å –ø–æ–∑–∂–µ
# –§—É–Ω–∫—Ü–∏—è starmap()
'''
persons = [('Timur', 'Guev'), ('Arthur', 'Kharisov')]
full_names = map(lambda tup: tup[0] + ' ' + tup[1], persons)

print(list(full_names))
'''

'''
–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
–∫ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è func, —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Ç–ª–∏—á–∏–µ–º:
func –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—é (—ç–ª–µ–º–µ–Ω—Ç iterable),
–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

def starmap(func, iterable):
    return map(func, iterable)


pairs = [(1, 3), (2, 5), (6, 4)]
print(*starmap(lambda a, b: a + b, pairs))
# 4 7 10

points = [(1, 1, 1), (1, 1, 2), (2, 2, 3)]
print(*starmap(lambda x, y, z: x * y * z, points))
# 1 2 12
'''


